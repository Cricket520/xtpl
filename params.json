{"name":"xtpl","tagline":"xtpl template engine","body":"## 基本 api\r\n\r\n### Class\r\n\r\nXTemplate/XTemplateRuntime\r\n\r\n构造器参数\r\n\r\n<table class=\"table table-bordered table-striped\">\r\n    <thead>\r\n    <tr>\r\n        <th style=\"width: 100px;\">name</th>\r\n        <th style=\"width: 50px;\">type</th>\r\n        <th>description</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr>\r\n        <td>content</td>\r\n        <td>String</td>\r\n        <td>模板字符串</td>\r\n    </tr>\r\n    <tr>\r\n            <td>config</td>\r\n            <td>Object</td>\r\n            <td>\r\n            对象属性含义：\r\n            <table class=\"table table-bordered table-striped\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th style=\"width: 100px;\">name</th>\r\n                        <th style=\"width: 50px;\">type</th>\r\n                        <th>description</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>name</td>\r\n                        <td>String</td>\r\n                        <td>模板名字，用于编译时报错</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>commands</td>\r\n                        <td>Object</td>\r\n                        <td>命令定义，详见下文</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n### Methods\r\n\r\nString render(data:Object, callback:Function): 渲染数据，参数含义如下\r\n\r\n<table class=\"table table-bordered table-striped\">\r\n    <thead>\r\n    <tr>\r\n        <th style=\"width: 100px;\">name</th>\r\n        <th style=\"width: 50px;\">type</th>\r\n        <th>description</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr>\r\n        <td>data</td>\r\n        <td>Object</td>\r\n        <td>数据对象</td>\r\n    </tr>\r\n    <tr>\r\n            <td>callback</td>\r\n            <td>Function</td>\r\n            <td>完毕回调，第一个参数为 error，第二个参数为渲染结果。如果不提供，同步命令下 render 返回渲染结果。</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n\r\n## 浏览器端使用\r\n\r\n### 未预编译\r\n\r\n``` javascript\r\nKISSY.use('xtemplate',function(S,XTemplate){\r\n  new XTemplate('{{x}}',{name: 'x-tpl'}).render({x:1},function(error,z){\r\n    // z=>1\r\n  });\r\n})\r\n```\r\n\r\n### 预编译\r\n\r\n```\r\nnpm install kissy@5.0.0-alpha.2 -g\r\nkissy-xtemplate -p x/   // x/ 为模板文件目录，后缀为 -xtpl.html\r\n```\r\n\r\n``` javascript\r\nKISSY.use('xtemplate/runtime,a/b-xtpl',function(S,XTemplateRuntime,bXtpl){\r\n  new XTemplateRuntime(bXtpl).render({x:1},function(error,z){\r\n    // z=>1\r\n  });\r\n})\r\n```\r\n\r\n## node 下使用\r\n\r\n包：https://www.npmjs.org/package/xtpl\r\n\r\nexpress 下使用:\r\n\r\n``` javascript\r\napp.set(\"view engine\", \"xtpl\");\r\n```\r\n\r\n模板文件全部为 xtpl 后缀，目录规范和渲染同 express\r\n\r\n## 语法\r\n\r\n### 基本类型\r\n\r\n支持 true false null undefined number string\r\n\r\n### 字面模式\r\n\r\n```\r\n{{%\r\n\r\n{{x}}\r\n\r\n%}}  // => {{x}}\r\n```\r\n\r\n### 注释\r\n\r\n```\r\n{{! zhu shi }}\r\n```\r\n\r\n### 变量渲染\r\n\r\n转义：\r\n\r\n```\r\n{{x}}\r\n```\r\n\r\n非转义:\r\n\r\n```\r\n{{{x}}}\r\n```\r\n\r\n### 支持变量属性获取\r\n\r\n``` javascript\r\nvar x = {\r\n    y: 1\r\n};\r\nvar y = [1, 2, 3];\r\nvar z = {\r\n    q: 1\r\n};\r\nvar x = 'q';\r\n```\r\n\r\n```\r\n{{x.y}} // 1\r\n{{y[1]}} // 2\r\n{{z[x]}} // 1\r\n```\r\n\r\n### 调用变量方法\r\n\r\n注意：该用法会影响性能，推荐自定义命令\r\n\r\n``` javascript\r\nvar x = [1, 2, 3];\r\n```\r\n\r\n```\r\n{{#each(x.slice(1))}}{{this}} {{/each}} // => 2 3\r\n```\r\n\r\n### 变量运算\r\n\r\n支持 + - * / %\r\n\r\n```\r\n{{x+y}}\r\n{{x + \"1\"}}\r\n{{ y - 1 }}\r\n```\r\n\r\n### 比较操作\r\n\r\n支持 === !=== > >= < <=\r\n\r\n```\r\n{{#if( x===1)}}\r\n1\r\n{{else}}\r\n2\r\n{{/if}}\r\n\r\n{{#if ( (x+1) > 2 )}}\r\n{{/if}}\r\n```\r\n\r\n### 逻辑操作\r\n\r\n支持 || &&\r\n\r\n```\r\n{{#if(x>1 && y<2)}}\r\n{{/if}}\r\n```\r\n\r\n```\r\n{{#if(!x)}}\r\n{{/if}}\r\n```\r\n\r\n### 循环\r\n\r\n可以对数组或对象进行循环操作，默认获取循环对象值为 {{this}}，键为 {{xindex}} , 也可以指定.\r\n\r\n``` javascript\r\nvar x = ['a', 'b'];\r\n```\r\n\r\n```\r\n{{#each(x)}}\r\n{{xindex}} {{this}} // 0 a 1 b\r\n{{/each}}\r\n\r\n{{#each(x,\"value\",\"index\")}}\r\n{{key}} {{value}} // 0 a 1 b\r\n{{/each}}\r\n```\r\n\r\n### 范围循环\r\n\r\n可以对 start 和 end(不包含) 范围内的数字进行循环\r\n\r\n```\r\n{{#each(range(0,3))}}{{this}}{{/each}} // 012\r\n{{#each(range(3,0))}}{{this}}{{/each}} // 321\r\n{{#each(range(3,0,2))}}{{this}}{{/each}} // 31\r\n```\r\n\r\n### 设置操作\r\n\r\n```\r\n{{set(x=1)}}\r\n\r\n{{x}} // 1\r\n```\r\n\r\n### 宏\r\n\r\n```\r\n// 声明\r\n{{#macro(\"test\",\"param\" default=1)}}param is {{param}} {{default}}{{/macro}}\r\n\r\n// 调用宏\r\n{{macro(\"test\",\"2\")}} // => param is 2 1\r\n\r\n{{macro(\"test\", \"2\", 2)}} // => param is 2 2\r\n```\r\n\r\n### 包含操作\r\n\r\nx.xtpl:\r\n```\r\n{{z}}\r\n```\r\n\r\ny.xtpl\r\n```\r\n{{include(\"x\")}}\r\n```\r\n\r\n### 继承\r\n\r\nlayout.xtpl\r\n\r\n``` html\r\n<!doctype html>\r\n<html>\r\n    <head>\r\n        <meta name=\"charset\" content=\"utf-8\" />\r\n        <title>{{title}}</title>\r\n        {{{block (\"head\")}}} // 坑\r\n    </head>\r\n    <body>\r\n        {{{include (\"./header\")}}}\r\n        {{{block (\"body\")}}}  // 坑\r\n        {{{include (\"./footer\")}}}\r\n    </body>\r\n</html>\r\n```\r\n\r\nindex.xtpl\r\n\r\n``` html\r\n{{extend (\"./layout1\")}}\r\n\r\n// 填\r\n{{#block (\"head\")}}\r\n    <link type=\"text/css\" href=\"test.css\" rev=\"stylesheet\" rel=\"stylesheet\"/>\r\n{{/block}}\r\n\r\n// 填\r\n{{#block (\"body\")}}\r\n    <h2>{{title}}</h2>\r\n{{/block}}\r\n```\r\n\r\n### 自定义命令\r\n\r\n#### nodejs 全局命令\r\n\r\n同步调用行内：\r\n\r\n``` javascript\r\nvar xtpl = require('xtpl');\r\nxtpl.XTemplate.addCommand('xInline',function(scope, option){\r\n  return option.params[0]+'1';\r\n});\r\n```\r\n\r\n此时模板中可通过 {{}} 来转义命令返回的内容.\r\n\r\n\r\n或使用 buffer (详见下面 Buffer api)\r\n\r\n``` javascript\r\nvar xtpl = require('xtpl');\r\nxtpl.XTemplate.addCommand('xInline',function(scope, option, buffer){\r\n  return buffer.write(option.params[0]+'1');\r\n});\r\n```\r\n\r\n此时模板不能控制命令返回内容是否转义.\r\n\r\n```\r\n{{xInline(1)}} // => 2\r\n```\r\n\r\n同步调用块级：\r\n\r\n``` javascript\r\nvar xtpl = require('xtpl');\r\nxtpl.XTemplate.addCommand('xBlock',function(scope, option, buffer){\r\n  return option.fn(scope, buffer)+option.params[0];\r\n});\r\n```\r\n\r\n```\r\n{{#xBlock(1)}}\r\n2\r\n{{/xBlock}}\r\n// => 21\r\n```\r\n\r\n异步调用行内\r\n\r\n``` javascript\r\nvar xtpl = require('xtpl');\r\nxtpl.XTemplate.addCommand('xInline',function(scope, option,buffer){\r\n  buffer = buffer.async(function(newBuffer){\r\n    setTimeout(function(){\r\n        newBuffer.write(option.params[0]+1).end();\r\n    },10);\r\n  });\r\n  return buffer;\r\n});\r\n```\r\n\r\n```\r\n{{xInline(1)}} // => 2\r\n```\r\n\r\n异步调用块级：\r\n\r\n``` javascript\r\nvar xtpl = require('xtpl');\r\nxtpl.XTemplate.addCommand('xInline',function(scope, option,buffer){\r\n  buffer = buffer.async(function(newBuffer){\r\n    setTimeout(function(){\r\n        var newScope = xtpl.XTemplate.Scope({ret:2});\r\n        newScope.setParent(scope);\r\n        option.fn(newScope, newBuffer);\r\n    },10);\r\n  });\r\n  buffer.write(option.params[0]);\r\n  return buffer;\r\n});\r\n```\r\n\r\n```\r\n{{#xBlock(1)}}\r\n{{ret}}\r\n{{/xBlock}}\r\n// => 21\r\n```\r\n\r\n#### 浏览器命令\r\n\r\n全局：\r\n\r\n``` javascript\r\nKISSY.use('xtemplate/runtime',function(S,XTemplate){\r\n    XTemplate.addCommand(...) // 同 node\r\n});\r\n```\r\n\r\n局部：\r\n\r\n``` javascript\r\nKISSY.use('xtemplate/runtime',function(S,XTemplate){\r\n    new XTemplate('{{x()}}',{\r\n        commands:{\r\n            x:function(){\r\n                // ... 同 node\r\n            }\r\n        }\r\n    })...\r\n});\r\n```\r\n\r\n### Buffer api\r\n\r\n#### Methods\r\n\r\nBuffer write(data:String, escape:Boolean): 写数据到缓冲区\r\n\r\n\r\n<table class=\"table table-bordered table-striped\">\r\n    <thead>\r\n    <tr>\r\n        <th style=\"width: 100px;\">name</th>\r\n        <th style=\"width: 50px;\">type</th>\r\n        <th>description</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr>\r\n        <td>data</td>\r\n        <td>String</td>\r\n        <td>将要写到缓冲区的字符串</td>\r\n    </tr>\r\n    <tr>\r\n            <td>escape</td>\r\n            <td>Boolean</td>\r\n            <td>是否转义</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n\r\nBuffer async(fn:Function): 产生新的异步缓冲区，新的缓冲区为 fn 回调函数的第一个参数\r\n\r\nBuffer end(data, escape): 参数含义同 write 函数。 标志缓冲区数据填充完毕，用于通知异步缓冲区的结束。\r\n\r\nBuffer error(reason): 触发 render 异步回调为失败。 reason 为回调的第一个参数.\r\n\r\n\r\n### Scope api\r\n\r\n\r\n#### Members\r\n\r\nparent: 上级作用域\r\n\r\nroot: 顶层作用域\r\n\r\n\r\n#### Methods\r\n\r\nvoid setParent(scope: Scope): 设置当前作用域的上级作用域\r\n\r\nvoid setData(data): 设置当前作用域内数据\r\n\r\nvar getData(): 获取当前作用域内数据\r\n\r\nvoid set(name,value): 设置当前作用域内附属数据\r\n\r\nvoid get(name): 获取当前作用域内数据值（包括附属数据）","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}